Статья в блог - кпи для команды.
https://www.youtube.com/watch?v=mJB83EZtAjc - Пересмотреть с 56-й минуты и законспектировать
https://rework.withgoogle.com/guides/set-goals-with-okrs/steps/introduction/ - read


Es is easier than not es - talk and articles.



Talk: difference between functional and imperative dependency injection
You should try to use only rules/practices you understand reason behind. Because if you do not understand reason - you do not knwo when not to apply this practice.
Example - DRY. It's intended to not repeat logic, so lofic would not diverge. But quite frequently it's applied on the level of similar source code. Especially in data structures.
We have two ways of providing env to service - imperative, classical dep injection, and functional, through reader monad and friends.
Let's assume our application if FRP, should we inject our logic via rep. injection or via Reader?
Answer is in the semancical difference. Imperative - you construct logic with closed dependency. Functional - you can execute constructed logic with provided dependency.
What's better? In vast majority of cases I saw all the time the same instance of dependency being injected to all invocations of the implementation.




Aggregate is not an entity - rules for creating aggregates
there were 2 chargers in specs now there are 34
what is CQRS, what is ES
operational and reporting db segregation
when to apply cluster sharding, when to apply optimistic locking
