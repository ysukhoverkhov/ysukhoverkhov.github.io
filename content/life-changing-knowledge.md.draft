Title: Life changing lessons.
Category: Subjective
Date: 2020-5-10
Tags: Education, books, talks

Since I'm full-time software development engineer and manager, most of pessonce are from this perspective, if you are not in IT, this also could be useful. So, do not hesitate.

# It's all subjective

Everything bellow works for me, does not necessary would work for you.
Because...

# Context matters

Context matters much more than everything else. What works with particular people and particular problem would not work with orther people or other problems.

Experience is not knowing what's the most effective way of working. Experience is our capability to quickly adapt to a new context and find the most effective way of working in this new context. If one is to remember just one thing from the post - remember previous sentence.

# Designing solutions

## ["Simple Made Easy"](https://www.infoq.com/presentations/Simple-Made-Easy/) by Rich Hickey

That's really a life changing talk for me. "Simple" is not "Easy", "Complex" is not "Hard".

"Easy" and "Hard" is description of effort requiret to get to the solution. "Simple" and "Complex" is a property of a solution. It could be easy to get to a complex solution and quite difficult to get to a simple one.

Once I understood it, my reasoning about selection of best solution became way more objective.

## The book about databases

TODO: search in my library.

## ["Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions"](https://www.goodreads.com/book/show/85012.Enterprise_Integration_Patterns) by Gregor Hohpe

It's about integration patterns between (micro)services. Quite objective. Almost all you need to know in one book.

# Being functional and reactive.

Being functional and controlling side effects has its value. Also that's on hype now in Scala community which I belong to. So...

## [Subtyping VS Subclassing VS Inheriteance](https://www.cs.princeton.edu/courses/archive/fall98/cs441/mainus/node12.html)

Ok, this is a short one. Do you realize inheriteance, subtypeing and subclassing are all three different terms with their own meaning and not just synonims? I didn't until I read the article.

And after reading that I was like "So what why OOP is so shity!" That's a joke, of course. Of course I don't actually think so.

## [ELM](https://elm-lang.org/)

That's a small "just for frontend" language which transpiles into JavaScript. ELM is almost pure lambda calculus. Think of it as of really-really simplified haskell. Playing with it should turn one's brain in a right Functional position..

## Cathegory theory for software engineers

TODO:


# Talking to business people

## Domain Driven Design

## That audio book I forgot about how to delegate.

# Working in humans

Software engineering is a yuong descipline. Many practices are based on previous subjective experience of successful engineers. That means, part of somftware negineer work is a negotioation with business people and other engineer. "Negotiation" is an engineering skills, the more "seniour" your position is the more valuable this skill is.

## ["Building Microservices: Designing Fine-Grained Systems"](https://www.goodreads.com/book/show/22512931-building-microservices) by Sam Newman

The most valuable part of the book is the second chapter - "The Evolutionary Architect". And it has nothing to do with Microservices. That's why the book is in "Working with humans" section.

TODO: main takeaway.

## ["The Ideal Executive: Why You Cannot Be One and What to Do About It, A New Paradigm for Management"](https://www.goodreads.com/book/show/21873100-the-ideal-executive?ac=1&from_search=true&qid=hQsaS9pmAG&rank=1) by Ichak Kalderon Adizes

The book explains why there are no ideal managers. Engineers should know it to understand their managers, managers should know it to not be a stellar guys.

My main takeaway - do not avoid conflicts. We are different, we analyze problems from different perspectives, we have different goals and values, all that means two things:

1. There would be a lot of conflicts before we get to conclusion.
1. If they are resolved we would get much more elaborate solution.

Do not avoid conflicts - their resolution yields amazing results. Instead teach yourself and people around you to separate emotions from conflict resolution. Conflicts are emotionally hard only if we make them emotianally hard, in their nature they are neutral.

## Applied Systems Analysis

I studied Applied Systems Analysis in my childhood in Russia, so everything I read was in russian and anyway I forgot all these books. Find on your own. I alsmost sure, Mr [Russell Ackoff](https://en.wikipedia.org/wiki/Russell_L._Ackoff) wrote some good stuff.

My main takeaways are:

1. Concept of "positive intervention" - with any intervention in a problematic situation one should try to make at least one stakeholder happier and other stakeholders not sad.
2. Understanding the fact what "voting", "polling", etc. have nothing to do with "democracy", "everybody is valuable" etc. If everybody is valuable, listen to everybody and take opinion of each and every onto acconut. Litearally.

## ["The transformative power of classical music"](https://www.ted.com/talks/benjamin_zander_the_transformative_power_of_classical_music) by Benjamin Zander

If you are short on time and ask me for the most important single item - watch that one.

TODO: review my reading list from dropbox.
